// Mocks generated by Mockito 5.4.4 from annotations
// in grekino/test/providers/great_movies_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:grekino/models/great_movie_model.dart' as _i5;
import 'package:grekino/repositories/i_firestore_great_movies_repository.dart'
    as _i6;
import 'package:grekino/repositories/i_local_great_movies_repository.dart'
    as _i4;
import 'package:grekino/services/i_connectivity_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIConnectivityService extends _i1.Mock
    implements _i2.IConnectivityService {
  @override
  bool get isDeviceConnected => (super.noSuchMethod(
        Invocation.getter(#isDeviceConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<void> checkInternetConnection() => (super.noSuchMethod(
        Invocation.method(
          #checkInternetConnection,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ILocalGreatMoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalGreatMoviesRepository extends _i1.Mock
    implements _i4.ILocalGreatMoviesRepository {
  @override
  _i3.Future<void> insertAll(
          _i3.Stream<List<_i5.GreatMovieModel>>? greatMovies) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [greatMovies],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> insertMoviesForVolume(
    int? volume,
    _i3.Stream<List<_i5.GreatMovieModel>>? greatMovies,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertMoviesForVolume,
          [
            volume,
            greatMovies,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i5.GreatMovieModel?> getMovieForId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieForId,
          [id],
        ),
        returnValue: _i3.Future<_i5.GreatMovieModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.GreatMovieModel?>.value(),
      ) as _i3.Future<_i5.GreatMovieModel?>);

  @override
  _i3.Future<_i5.GreatMovieModel?> getMovieForImdbId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieForImdbId,
          [id],
        ),
        returnValue: _i3.Future<_i5.GreatMovieModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.GreatMovieModel?>.value(),
      ) as _i3.Future<_i5.GreatMovieModel?>);

  @override
  _i3.Stream<List<_i5.GreatMovieModel>> getMoviesForVolume(int? volume) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesForVolume,
          [volume],
        ),
        returnValue: _i3.Stream<List<_i5.GreatMovieModel>>.empty(),
        returnValueForMissingStub:
            _i3.Stream<List<_i5.GreatMovieModel>>.empty(),
      ) as _i3.Stream<List<_i5.GreatMovieModel>>);

  @override
  _i3.Future<List<_i5.GreatMovieModel>> searchMovies(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [searchTerm],
        ),
        returnValue: _i3.Future<List<_i5.GreatMovieModel>>.value(
            <_i5.GreatMovieModel>[]),
        returnValueForMissingStub: _i3.Future<List<_i5.GreatMovieModel>>.value(
            <_i5.GreatMovieModel>[]),
      ) as _i3.Future<List<_i5.GreatMovieModel>>);

  @override
  _i3.Future<void> updateGreatMovie(_i5.GreatMovieModel? greatMovie) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGreatMovie,
          [greatMovie],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [IFirestoreGreatMoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFirestoreGreatMoviesRepository extends _i1.Mock
    implements _i6.IFirestoreGreatMoviesRepository {
  @override
  _i3.Stream<_i7.QuerySnapshot<Object?>> getStream() => (super.noSuchMethod(
        Invocation.method(
          #getStream,
          [],
        ),
        returnValue: _i3.Stream<_i7.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i7.QuerySnapshot<Object?>>.empty(),
      ) as _i3.Stream<_i7.QuerySnapshot<Object?>>);

  @override
  _i3.Stream<_i7.QuerySnapshot<Object?>> getStreamForVolume(int? volume) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStreamForVolume,
          [volume],
        ),
        returnValue: _i3.Stream<_i7.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i7.QuerySnapshot<Object?>>.empty(),
      ) as _i3.Stream<_i7.QuerySnapshot<Object?>>);

  @override
  _i3.Stream<List<_i5.GreatMovieModel>> getMoviesForVolume(int? volume) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesForVolume,
          [volume],
        ),
        returnValue: _i3.Stream<List<_i5.GreatMovieModel>>.empty(),
        returnValueForMissingStub:
            _i3.Stream<List<_i5.GreatMovieModel>>.empty(),
      ) as _i3.Stream<List<_i5.GreatMovieModel>>);

  @override
  _i3.Future<_i5.GreatMovieModel?> getMovieForId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieForId,
          [id],
        ),
        returnValue: _i3.Future<_i5.GreatMovieModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.GreatMovieModel?>.value(),
      ) as _i3.Future<_i5.GreatMovieModel?>);

  @override
  _i3.Future<_i5.GreatMovieModel?> getMovieForImdbId(String? imdbId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieForImdbId,
          [imdbId],
        ),
        returnValue: _i3.Future<_i5.GreatMovieModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.GreatMovieModel?>.value(),
      ) as _i3.Future<_i5.GreatMovieModel?>);

  @override
  _i3.Future<void> addGreatMovie(_i5.GreatMovieModel? greatMovie) =>
      (super.noSuchMethod(
        Invocation.method(
          #addGreatMovie,
          [greatMovie],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateGreatMovie(_i5.GreatMovieModel? greatMovie) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGreatMovie,
          [greatMovie],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
