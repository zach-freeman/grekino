// Mocks generated by Mockito 5.4.4 from annotations
// in grekino/test/view_models/movie_diary_entry_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:grekino/models/great_movie_model.dart' as _i5;
import 'package:grekino/models/tmdb_results_model.dart' as _i2;
import 'package:grekino/providers/i_great_movies_provider.dart' as _i3;
import 'package:grekino/repositories/i_tmdb_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieResult_0 extends _i1.SmartFake implements _i2.MovieResult {
  _FakeMovieResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IGreatMoviesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGreatMoviesProvider extends _i1.Mock
    implements _i3.IGreatMoviesProvider {
  @override
  _i4.Future<_i5.GreatMovieModel?> getMovieForId(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieForId,
          [id],
        ),
        returnValue: _i4.Future<_i5.GreatMovieModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.GreatMovieModel?>.value(),
      ) as _i4.Future<_i5.GreatMovieModel?>);

  @override
  _i4.Future<_i5.GreatMovieModel?> getMovieForImdbId(String? imdbId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieForImdbId,
          [imdbId],
        ),
        returnValue: _i4.Future<_i5.GreatMovieModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.GreatMovieModel?>.value(),
      ) as _i4.Future<_i5.GreatMovieModel?>);

  @override
  _i4.Stream<List<_i5.GreatMovieModel>> getMoviesForVolume(int? volume) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviesForVolume,
          [volume],
        ),
        returnValue: _i4.Stream<List<_i5.GreatMovieModel>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i5.GreatMovieModel>>.empty(),
      ) as _i4.Stream<List<_i5.GreatMovieModel>>);

  @override
  _i4.Future<List<_i5.GreatMovieModel>> searchMovies(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [searchTerm],
        ),
        returnValue: _i4.Future<List<_i5.GreatMovieModel>>.value(
            <_i5.GreatMovieModel>[]),
        returnValueForMissingStub: _i4.Future<List<_i5.GreatMovieModel>>.value(
            <_i5.GreatMovieModel>[]),
      ) as _i4.Future<List<_i5.GreatMovieModel>>);

  @override
  _i4.Future<void> updateGreatMovie(_i5.GreatMovieModel? greatMovie) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGreatMovie,
          [greatMovie],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ITmdbRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITmdbRepository extends _i1.Mock implements _i6.ITmdbRepository {
  @override
  _i4.Future<String> getImageUrlPrefix() => (super.noSuchMethod(
        Invocation.method(
          #getImageUrlPrefix,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getImageUrlPrefix,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getImageUrlPrefix,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i2.MovieResult> getMovieResult(String? imdbId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieResult,
          [imdbId],
        ),
        returnValue: _i4.Future<_i2.MovieResult>.value(_FakeMovieResult_0(
          this,
          Invocation.method(
            #getMovieResult,
            [imdbId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.MovieResult>.value(_FakeMovieResult_0(
          this,
          Invocation.method(
            #getMovieResult,
            [imdbId],
          ),
        )),
      ) as _i4.Future<_i2.MovieResult>);
}
