// Mocks generated by Mockito 5.4.4 from annotations
// in grekino/integration_test/app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:grekino/models/great_movie_model.dart' as _i5;
import 'package:grekino/providers/i_great_movies_provider.dart' as _i2;
import 'package:grekino/view_models/volume_movie_list_view_model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIGreatMoviesProvider_0 extends _i1.SmartFake
    implements _i2.IGreatMoviesProvider {
  _FakeIGreatMoviesProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VolumeMovieListViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockVolumeMovieListViewModel extends _i1.Mock
    implements _i3.VolumeMovieListViewModel {
  @override
  _i2.IGreatMoviesProvider get greatMoviesProvider => (super.noSuchMethod(
        Invocation.getter(#greatMoviesProvider),
        returnValue: _FakeIGreatMoviesProvider_0(
          this,
          Invocation.getter(#greatMoviesProvider),
        ),
        returnValueForMissingStub: _FakeIGreatMoviesProvider_0(
          this,
          Invocation.getter(#greatMoviesProvider),
        ),
      ) as _i2.IGreatMoviesProvider);

  @override
  set greatMoviesProvider(_i2.IGreatMoviesProvider? _greatMoviesProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #greatMoviesProvider,
          _greatMoviesProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic setLoading(bool? loading) => super.noSuchMethod(
        Invocation.method(
          #setLoading,
          [loading],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setGreatMovieList(
          _i4.Stream<List<_i5.GreatMovieModel>>? moviesStream) =>
      super.noSuchMethod(
        Invocation.method(
          #setGreatMovieList,
          [moviesStream],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic getGreatMovies(int? volume) => super.noSuchMethod(
        Invocation.method(
          #getGreatMovies,
          [volume],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
